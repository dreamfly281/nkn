// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: porpackage.proto

package por

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PorPackage struct {
	VoteHeight uint32    `protobuf:"varint,1,opt,name=VoteHeight,proto3" json:"VoteHeight,omitempty"`
	Owner      []byte    `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
	BlockHash  []byte    `protobuf:"bytes,3,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	TxnHash    []byte    `protobuf:"bytes,4,opt,name=TxnHash,proto3" json:"TxnHash,omitempty"`
	SigHash    []byte    `protobuf:"bytes,5,opt,name=SigHash,proto3" json:"SigHash,omitempty"`
	SigChain   *SigChain `protobuf:"bytes,6,opt,name=SigChain" json:"SigChain,omitempty"`
}

func (m *PorPackage) Reset()      { *m = PorPackage{} }
func (*PorPackage) ProtoMessage() {}
func (*PorPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_porpackage_a890dc2464fafe41, []int{0}
}
func (m *PorPackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PorPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PorPackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PorPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PorPackage.Merge(dst, src)
}
func (m *PorPackage) XXX_Size() int {
	return m.Size()
}
func (m *PorPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_PorPackage.DiscardUnknown(m)
}

var xxx_messageInfo_PorPackage proto.InternalMessageInfo

func (m *PorPackage) GetVoteHeight() uint32 {
	if m != nil {
		return m.VoteHeight
	}
	return 0
}

func (m *PorPackage) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *PorPackage) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *PorPackage) GetTxnHash() []byte {
	if m != nil {
		return m.TxnHash
	}
	return nil
}

func (m *PorPackage) GetSigHash() []byte {
	if m != nil {
		return m.SigHash
	}
	return nil
}

func (m *PorPackage) GetSigChain() *SigChain {
	if m != nil {
		return m.SigChain
	}
	return nil
}

func init() {
	proto.RegisterType((*PorPackage)(nil), "por.PorPackage")
}
func (this *PorPackage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PorPackage)
	if !ok {
		that2, ok := that.(PorPackage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VoteHeight != that1.VoteHeight {
		return false
	}
	if !bytes.Equal(this.Owner, that1.Owner) {
		return false
	}
	if !bytes.Equal(this.BlockHash, that1.BlockHash) {
		return false
	}
	if !bytes.Equal(this.TxnHash, that1.TxnHash) {
		return false
	}
	if !bytes.Equal(this.SigHash, that1.SigHash) {
		return false
	}
	if !this.SigChain.Equal(that1.SigChain) {
		return false
	}
	return true
}
func (this *PorPackage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&por.PorPackage{")
	s = append(s, "VoteHeight: "+fmt.Sprintf("%#v", this.VoteHeight)+",\n")
	s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	s = append(s, "BlockHash: "+fmt.Sprintf("%#v", this.BlockHash)+",\n")
	s = append(s, "TxnHash: "+fmt.Sprintf("%#v", this.TxnHash)+",\n")
	s = append(s, "SigHash: "+fmt.Sprintf("%#v", this.SigHash)+",\n")
	if this.SigChain != nil {
		s = append(s, "SigChain: "+fmt.Sprintf("%#v", this.SigChain)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPorpackage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PorPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PorPackage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VoteHeight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPorpackage(dAtA, i, uint64(m.VoteHeight))
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPorpackage(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPorpackage(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	if len(m.TxnHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPorpackage(dAtA, i, uint64(len(m.TxnHash)))
		i += copy(dAtA[i:], m.TxnHash)
	}
	if len(m.SigHash) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPorpackage(dAtA, i, uint64(len(m.SigHash)))
		i += copy(dAtA[i:], m.SigHash)
	}
	if m.SigChain != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPorpackage(dAtA, i, uint64(m.SigChain.Size()))
		n1, err := m.SigChain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintPorpackage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedPorPackage(r randyPorpackage, easy bool) *PorPackage {
	this := &PorPackage{}
	this.VoteHeight = uint32(r.Uint32())
	v1 := r.Intn(100)
	this.Owner = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Owner[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.BlockHash = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.BlockHash[i] = byte(r.Intn(256))
	}
	v3 := r.Intn(100)
	this.TxnHash = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.TxnHash[i] = byte(r.Intn(256))
	}
	v4 := r.Intn(100)
	this.SigHash = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.SigHash[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.SigChain = NewPopulatedSigChain(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyPorpackage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePorpackage(r randyPorpackage) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPorpackage(r randyPorpackage) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RunePorpackage(r)
	}
	return string(tmps)
}
func randUnrecognizedPorpackage(r randyPorpackage, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPorpackage(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPorpackage(dAtA []byte, r randyPorpackage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePorpackage(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulatePorpackage(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulatePorpackage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePorpackage(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePorpackage(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePorpackage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePorpackage(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *PorPackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteHeight != 0 {
		n += 1 + sovPorpackage(uint64(m.VoteHeight))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovPorpackage(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovPorpackage(uint64(l))
	}
	l = len(m.TxnHash)
	if l > 0 {
		n += 1 + l + sovPorpackage(uint64(l))
	}
	l = len(m.SigHash)
	if l > 0 {
		n += 1 + l + sovPorpackage(uint64(l))
	}
	if m.SigChain != nil {
		l = m.SigChain.Size()
		n += 1 + l + sovPorpackage(uint64(l))
	}
	return n
}

func sovPorpackage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPorpackage(x uint64) (n int) {
	return sovPorpackage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PorPackage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PorPackage{`,
		`VoteHeight:` + fmt.Sprintf("%v", this.VoteHeight) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`BlockHash:` + fmt.Sprintf("%v", this.BlockHash) + `,`,
		`TxnHash:` + fmt.Sprintf("%v", this.TxnHash) + `,`,
		`SigHash:` + fmt.Sprintf("%v", this.SigHash) + `,`,
		`SigChain:` + strings.Replace(fmt.Sprintf("%v", this.SigChain), "SigChain", "SigChain", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPorpackage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PorPackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorpackage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PorPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PorPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteHeight", wireType)
			}
			m.VoteHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorpackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteHeight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorpackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPorpackage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorpackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPorpackage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorpackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPorpackage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxnHash = append(m.TxnHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxnHash == nil {
				m.TxnHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorpackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPorpackage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigHash = append(m.SigHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SigHash == nil {
				m.SigHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorpackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPorpackage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SigChain == nil {
				m.SigChain = &SigChain{}
			}
			if err := m.SigChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPorpackage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPorpackage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPorpackage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPorpackage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPorpackage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPorpackage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPorpackage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPorpackage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPorpackage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPorpackage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPorpackage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("porpackage.proto", fileDescriptor_porpackage_a890dc2464fafe41) }

var fileDescriptor_porpackage_a890dc2464fafe41 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xd0, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0xc6, 0x71, 0x3f, 0x4a, 0x0b, 0x18, 0x8a, 0x90, 0xc5, 0x10, 0x55, 0xe8, 0xa9, 0x62, 0x0a,
	0x03, 0xa9, 0x04, 0x2b, 0x53, 0x59, 0xba, 0x51, 0xa5, 0x88, 0x3d, 0x89, 0x82, 0x63, 0x15, 0xf2,
	0x22, 0x37, 0x15, 0x8c, 0x1c, 0x81, 0x63, 0x70, 0x04, 0x36, 0x56, 0xc6, 0x8c, 0x1d, 0x89, 0xb3,
	0x30, 0x76, 0x64, 0x44, 0xb5, 0x29, 0xb0, 0xe5, 0xff, 0xfd, 0x14, 0xcb, 0x32, 0x3f, 0x28, 0x48,
	0x17, 0x51, 0x32, 0x8d, 0x64, 0x1a, 0x14, 0x9a, 0x4a, 0x12, 0xad, 0x82, 0x74, 0xef, 0x54, 0xaa,
	0x32, 0x9b, 0xc7, 0x41, 0x42, 0xf7, 0x03, 0x49, 0x92, 0x06, 0xd6, 0xe2, 0xf9, 0xad, 0x2d, 0x1b,
	0xf6, 0xcb, 0xfd, 0xd3, 0xdb, 0x9f, 0x29, 0x99, 0x64, 0x91, 0xca, 0x5d, 0x1f, 0xbf, 0x01, 0xe7,
	0x63, 0xd2, 0x63, 0x77, 0xb0, 0x40, 0xce, 0x6f, 0xa8, 0x4c, 0x47, 0xa9, 0x92, 0x59, 0xe9, 0x41,
	0x1f, 0xfc, 0x6e, 0xf8, 0x6f, 0x11, 0x87, 0xbc, 0x7d, 0xf5, 0x90, 0xa7, 0xda, 0xdb, 0xe8, 0x83,
	0xbf, 0x17, 0xba, 0x10, 0x47, 0x7c, 0x67, 0x78, 0x47, 0xc9, 0x74, 0x14, 0xcd, 0x32, 0xaf, 0x65,
	0xe5, 0x6f, 0x10, 0x1e, 0xdf, 0xba, 0x7e, 0xcc, 0xad, 0x6d, 0x5a, 0x5b, 0xe7, 0x4a, 0x26, 0x4a,
	0x5a, 0x69, 0x3b, 0xf9, 0x49, 0x71, 0xc2, 0xb7, 0x27, 0x4a, 0x5e, 0xae, 0x2e, 0xea, 0x75, 0xfa,
	0xe0, 0xef, 0x9e, 0x75, 0x83, 0x82, 0x74, 0xb0, 0x1e, 0xc3, 0x5f, 0x1e, 0x5e, 0x54, 0x35, 0xb2,
	0x45, 0x8d, 0x6c, 0x59, 0x23, 0x7c, 0xd5, 0x08, 0x4f, 0x06, 0xe1, 0xc5, 0x20, 0xbc, 0x1a, 0x84,
	0x77, 0x83, 0x50, 0x19, 0x84, 0x0f, 0x83, 0xf0, 0x69, 0x90, 0x2d, 0x0d, 0xc2, 0x73, 0x83, 0xac,
	0x6a, 0x90, 0x2d, 0x1a, 0x64, 0x71, 0xc7, 0x3e, 0xc3, 0xf9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x61, 0xf1, 0x67, 0xe3, 0x5e, 0x01, 0x00, 0x00,
}
